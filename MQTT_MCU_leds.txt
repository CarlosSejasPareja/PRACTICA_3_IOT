#include <WiFi.h>
#include <PubSubClient.h>

const char * WIFI_SSID = "UCB-PREMIUM";
const char * WIFI_PASS = "lacatoucb";

const char * MQTT_BROKER = "broker.hivemq.com";
const int MQTT_BROKER_PORT = 1883;

const char * MQTT_CLIENT_ID = "coboserv";
const char * SUBSCRIBE_TOPIC = "ucb/cobos/input";
const char * PUBLISH_TOPIC = "ucb/cobos/output";

const int LEDPINS[] = {27, 26, 25};
const int NUM_LEDS = sizeof(LEDPINS) / sizeof(LEDPINS[0]);

WiFiClient wiFiClient;
PubSubClient mqttClient(wiFiClient);

void callback(const char * topic, byte * payload, unsigned int lenght) {
  String message;
  for (int i = 0; i < lenght; i++) {
    message += String((char) payload[i]);
  }
 if (String(topic) == SUBSCRIBE_TOPIC) {
    Serial.println("Message from topic " + String(topic) + ": " + message);

    String value = message.toInt();
    if (value >= 0 && value <= 3) {
        for (int i = 0; i < NUM_LEDS; i++) {
            if (i < value) {
                digitalWrite(LEDPINS[i], HIGH);
            } else {
               digitalWrite(LEDPINS[i], LOW);
            }
        }
    }
 }

}

boolean mqttClientConnect() {
  Serial.print("Connecting to " + String(MQTT_BROKER));
  if (mqttClient.connect(MQTT_CLIENT_ID)) {
    Serial.println(" DONE!");

    mqttClient.subscribe(SUBSCRIBE_TOPIC);
    Serial.println("Subscribed to " + String(SUBSCRIBE_TOPIC));
  } else {
    Serial.println("Can't connect to " + String(MQTT_BROKER));
  }
  return mqttClient.connected();
}

void setup() {
  for (int i = 0; i < sizeof(LEDPINS) / sizeof(LEDPINS[0]); i++) {
    pinMode(LEDPINS[i], OUTPUT);
 }
  pinMode(LED_BUILTIN, OUTPUT);

  Serial.begin(115200);
  Serial.print("Connecting to " + String(WIFI_SSID));

  WiFi.begin(WIFI_SSID, WIFI_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(200);
    Serial.print(".");
  }
  Serial.println(" DONE!");

  mqttClient.setServer(MQTT_BROKER, MQTT_BROKER_PORT);
  mqttClient.setCallback(callback);
}

unsigned long previousConnectMillis = 0;
unsigned long previousPublishMillis = 0;

unsigned char counter = 0;

void loop() {
  unsigned long now = millis();
  if (!mqttClient.connected()) {
    if (now - previousConnectMillis >= 2000) {
      previousConnectMillis = now;
      if (mqttClientConnect()) previousConnectMillis = 0;
      else delay(100);
    }
  } else { // Connected to the MQTT Broker
    mqttClient.loop();
    delay(20);
  }
}
